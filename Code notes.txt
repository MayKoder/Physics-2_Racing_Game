
	//This will be moved to vehicle
	PhysBody3D* wheels[4];
	PhysBody3D* car_body[2];
	Primitive* wheels_prim[4];
	Primitive* car_body_prim[2];

	int i = 0;
	car_body[i] = CreateRectangle({ 0, 5, 0 }, { 0, 0, 0, 1 }, {2, 1, 3}, White, 1.f);
	car_body_prim[i] = map_objects.getLast()->data;
	i++;
	car_body[i] = CreateRectangle({ 0, 5.6f, .2f}, { 0, 0, 0, 1 }, {1, 0.4f, 1.5f}, Black, 1.f);
	car_body_prim[i] = map_objects.getLast()->data;

	i = 0;
	wheels[i] = CreateCylinder({ 0.8, 3.9f, 1 }, { 0, 0, 0, 1 }, 0.5f, 0.2f, Red, 1.f);
	wheels_prim[i] = map_objects.getLast()->data;
	i++;

	wheels[i] = CreateCylinder({ -0.8, 3.9f, 1 }, { 0, 0, 0, 1 }, 0.5f, 0.2f, Red, 1.f);
	wheels_prim[i] = map_objects.getLast()->data;
	i++;

	wheels[i] = CreateCylinder({ -0.8, 3.9f, -1 }, { 0, 0, 0, 1 }, 0.5f, 0.2f, Red, 1.f);
	wheels_prim[i] = map_objects.getLast()->data;
	i++;

	wheels[i] = CreateCylinder({ 0.8, 3.9f, -1 }, { 0, 0, 0, 1 }, 0.5f, 0.2f, Red, 1.f);
	wheels_prim[i] = map_objects.getLast()->data;
	i++;

	//App->physics->AddConstraintHinge(*car_body[0], *car_body[1], { 0, 1, 0 }, { 0, 0, 0 }, { 0, 0, 1 }, {0, 0, 0}, true);
	App->physics->AddFixedConstrain(*car_body[0], *car_body[1]);


	for (int i = 0; i < 2; i++)
	{
		car_body[i]->GetTransform(&car_body_prim[i]->transform);
	}
	for (int i = 0; i < 4; i++)
	{
		wheels[i]->GetTransform(&wheels_prim[i]->transform);
	}


	void AddFixedConstrain(PhysBody3D& bodyA, PhysBody3D& bodyB, btVector3 offset);
void ModulePhysics3D::AddFixedConstrain(PhysBody3D& bodyA, PhysBody3D& bodyB, btVector3 offset)
{
	btTransform transB = bodyA.body->getWorldTransform();

	mat4x4 pos;
	transB.getOpenGLMatrix(&pos);
	pos.M[13] += offset.getY();
	transB.setFromOpenGLMatrix(&pos);

	btFixedConstraint* cons = new btFixedConstraint(*(bodyA.body), *(bodyB.body), transB, bodyA.body->getWorldTransform());

	world->addConstraint(cons, true);
	constraints.add(cons);
	cons->setDbgDrawSize(2.0f);
}
